{"version":3,"sources":["./src/app/_utils/formValidationUtils.ts"],"names":[],"mappings":";;;;;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,wBAAwB,CAAC,IAAe,EAAE,KAA4B;IAClF,IAAI,CAAC,KAAK,CAAC,IAAI;QAAE,KAAK,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;IAClD,IAAI,CAAC,KAAK,CAAC,KAAK;QAAE,IAAI,CAAC,SAAS,iCAAM,IAAI,CAAC,MAAM,KAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAG,CAAC;;QACrG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,iCAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,KAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAG,CAAC;AACnI,CAAC;AAEM,SAAS,oCAAoC,CAAC,eAA4B,EAAE,QAAqB;IACpG,eAAe,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3D,eAAe,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAClD,OAAO,IAAI,CAAC;AAChB,CAAC;AAEM,SAAS,2CAA2C,CAAC,QAAqB,EAAE,eAA4B;IAC3G,IAAI,QAAQ,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK;QAAE,OAAO,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC;IACtF,OAAO,IAAI,CAAC;AAChB,CAAC;AAEM,SAAS,cAAc,CAAC,OAAoB;IAC/C,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC;QAAE,OAAO,IAAI,CAAC;IACpD,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AAClC,CAAC;AAEM,SAAS,aAAa,CAAC,OAAoB;IAC9C,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;QAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;IAClF,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAS,QAAQ,CAAC,GAAW,EAAE,MAAc;IACzC,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC9B,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,CAAC;AAC/C,CAAC","file":"common.js","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\r\n\r\n// export function validateAllFormFields(formGroup: FormGroup) {\r\n//     Object.keys(formGroup.controls).forEach(field => {\r\n//         const control = formGroup.get(field);\r\n//         if (control instanceof FormControl) {\r\n//             control.markAsTouched({ onlySelf: true });\r\n//         } else if (control instanceof FormGroup) {\r\n//             this.validateAllFormFields(control);\r\n//         }\r\n//     });\r\n// }\r\n\r\nexport type serverValidationError = {\r\n    type: string;\r\n    value?: any;\r\n    field?: string;\r\n}\r\n\r\nexport function setServerValidationError(form: FormGroup, error: serverValidationError) {\r\n    if (!error.type) error = { type: \"unknownError\" };\r\n    if (!error.field) form.setErrors({ ...form.errors, [error.type]: \"value\" in error ? error.value : true });\r\n    else form.get(error.field).setErrors({ ...form.get(error.field).errors, [error.type]: \"value\" in error ? error.value : true });\r\n}\r\n\r\nexport function passwordConfirmValidatorPartPassword(passwordConfirm: FormControl, password: FormControl) {\r\n    passwordConfirm.updateValueAndValidity({ onlySelf: true });\r\n    passwordConfirm.markAsTouched({ onlySelf: true });\r\n    return null;\r\n}\r\n\r\nexport function passwordConfirmValidatorPartPasswordConfirm(password: FormControl, passwordConfirm: FormControl) {\r\n    if (password.value !== passwordConfirm.value) return { 'passwordConfirmError': true };\r\n    return null;\r\n}\r\n\r\nexport function phoneValidator(control: FormControl) {\r\n    if (testFull(control.value, /[\\d- ]+/)) return null;\r\n    return { 'phoneError': true };\r\n}\r\n\r\nexport function trimValidator(control: FormControl) {\r\n    if (control.value && control.value.match(/^\\s|\\s$/)) return { 'trimError': true };\r\n    return null;\r\n}\r\n\r\nfunction testFull(str: string, regExp: RegExp) {\r\n    const rez = str.match(regExp);\r\n    return rez && rez[0].length === str.length;\r\n}"],"sourceRoot":"webpack:///"}